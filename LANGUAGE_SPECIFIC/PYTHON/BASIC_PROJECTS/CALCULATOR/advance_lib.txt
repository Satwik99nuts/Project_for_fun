1. math library → The basic magic wand

Think of math like a small bag of magic tricks every beginner wizard gets.
It can’t do super complex stuff like summoning dragons (integration/differentiation),
but it can do simple, powerful spells:

Adding square roots

Finding logarithms

Doing trigonometry (sin, cos, tan)

Finding factorials

📦 How to use it:

import math

print(math.sqrt(25))      # 5.0 → Magic "square root"
print(math.log(100, 10))  # 2.0 → Logarithm (base 10)
print(math.sin(math.pi/2))# 1.0 → Sine of 90 degrees
print(math.factorial(5))  # 120 → Factorial


🧠 Analogy: Imagine you have a Swiss Army knife — it won’t build a house,
but you can open cans, cut ropes, and fix small things.

2. numpy library → The super calculator

numpy is like a magic calculator that can do math on whole groups of numbers at once instead of one number at a time.
If you have 10,000 numbers to multiply by 2, numpy will do it instantly.

📦 How to use it:

import numpy as np

numbers = np.array([1, 2, 3, 4])
print(numbers * 2)    # [2 4 6 8] → All numbers doubled at once
print(np.sin(numbers)) # Sine for each number in the list


🧠 Analogy: Instead of adding candies to each kid one by one, you clone yourself into 10,000 copies and give them candies all at once.

3. sympy library → The wizard’s spellbook for algebra

sympy is the library that lets your calculator think like a mathematician instead of a number cruncher.
It can:

Differentiate & integrate

Solve equations exactly (not just decimals)

Simplify expressions

Work with symbols like x and y without turning them into numbers immediately

📦 How to use it:

import sympy as sp

x = sp.symbols('x')
expr = x**2 + 2*x + 1

# Differentiate
print(sp.diff(expr, x))  # 2*x + 2

# Integrate
print(sp.integrate(expr, x))  # x**3/3 + x**2 + x

# Solve equation
print(sp.solve(expr, x))  # [-1]


🧠 Analogy: If math is a pocket calculator and numpy is a supercomputer,
sympy is Einstein sitting in your room, solving problems in his head and writing exact formulas.

4. scipy library → The scientist’s laboratory

scipy builds on top of numpy and lets you do real-world science and engineering math:

More advanced integration/differentiation (numerical)

Signal processing

Statistics

Optimization

📦 How to use it (integration example):

import numpy as np
from scipy import integrate

# Function to integrate
f = lambda x: x**2

# Integrate from 0 to 3
area, error = integrate.quad(f, 0, 3)
print(area)  # 9.0


🧠 Analogy: If numpy is a super calculator,
scipy is a whole laboratory with equipment for chemistry, physics, and engineering.

🗺️ Summary Table:
Library	Best For	Example Use
math	Simple single-number math	sin(30°), log(10), factorial(5)
numpy	Math with large sets of numbers	Multiply 1000 numbers instantly
sympy	Algebra & symbolic math	Differentiate x²+3x+2
scipy	Advanced science/engineering math	Complex integration, optimization